// –ì–µ–æ—É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤

// Google Maps API –∫–ª—é—á (–∏–∑ app.json)
const GOOGLE_MAPS_API_KEY = 'AIzaSyDs42whH2dBmdmuNLIL2dN-i8C9VzxPVnU';

// üÜï Google Directions API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
export async function getDirectionsFromGoogle(origin, destination, waypoints = [], travelMode = 'WALKING') {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Google Directions API
    const originStr = `${origin.latitude},${origin.longitude}`;
    const destStr = `${destination.latitude},${destination.longitude}`;
    
    let waypointsStr = '';
    if (waypoints && waypoints.length > 0) {
      const waypointCoords = waypoints.map(wp => `${wp.latitude},${wp.longitude}`);
      waypointsStr = `&waypoints=optimize:true|${waypointCoords.join('|')}`;
    }

    const url = `https://maps.googleapis.com/maps/api/directions/json?` +
      `origin=${originStr}&destination=${destStr}${waypointsStr}` +
      `&mode=${travelMode.toLowerCase()}&language=ru&region=kz` +
      `&key=${GOOGLE_MAPS_API_KEY}`;

    console.log('üó∫Ô∏è Requesting directions from Google API...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 8 —Å–µ–∫—É–Ω–¥

    const response = await fetch(url, { 
      signal: controller.signal,
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      }
    });
    
    clearTimeout(timeoutId);

    if (!response.ok) {
      console.warn(`‚ùå Google API HTTP error: ${response.status} - ${response.statusText}`);
      console.warn('üìù –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
      console.warn('1. –í–∫–ª—é—á–µ–Ω –ª–∏ Directions API –≤ Google Cloud Console');
      console.warn('2. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ (billing) –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞');
      console.warn('3. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–≤–æ—Ç—ã –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤');
      return createFallbackRoute(origin, destination, waypoints);
    }

    const data = await response.json();

    if (data.status === 'OK' && data.routes && data.routes.length > 0) {
      const route = data.routes[0];
      
      console.log('‚úÖ Google Directions API —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      return {
        success: true,
        route: {
          coordinates: decodePolyline(route.overview_polyline.points),
          distance: route.legs.reduce((total, leg) => total + leg.distance.value, 0) / 1000, // –≤ –∫–º
          duration: route.legs.reduce((total, leg) => total + leg.duration.value, 0) / 60, // –≤ –º–∏–Ω—É—Ç–∞—Ö
          instructions: route.legs.flatMap(leg => 
            leg.steps.map(step => ({
              instruction: step.html_instructions.replace(/<[^>]*>/g, ''), // —É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
              distance: step.distance.text,
              duration: step.duration.text,
              coordinates: {
                latitude: step.start_location.lat,
                longitude: step.start_location.lng
              }
            }))
          ),
          bounds: {
            northeast: route.bounds.northeast,
            southwest: route.bounds.southwest
          }
        },
        waypointOrder: data.routes[0].waypoint_order || []
      };
    } else {
      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Google API
      console.warn('‚ùå Google Directions API –æ—à–∏–±–∫–∞:', data.status);
      if (data.error_message) {
        console.warn('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:', data.error_message);
      }
      
      // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
      switch (data.status) {
        case 'REQUEST_DENIED':
          console.warn('üîë –†–µ—à–µ–Ω–∏–µ: –ù—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å Directions API –≤ Google Cloud Console');
          console.warn('üìç –°—Å—ã–ª–∫–∞: https://console.cloud.google.com/apis/library/directions-backend.googleapis.com');
          break;
        case 'OVER_DAILY_LIMIT':
        case 'OVER_QUERY_LIMIT':
          console.warn('üí∞ –†–µ—à–µ–Ω–∏–µ: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å billing –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã');
          break;
        case 'INVALID_REQUEST':
          console.warn('üìù –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
          break;
        case 'ZERO_RESULTS':
          console.warn('üö´ –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
          break;
        default:
          console.warn('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Google API');
      }
      
      return createFallbackRoute(origin, destination, waypoints);
    }
  } catch (error) {
    if (error.name === 'AbortError') {
      console.warn('‚è±Ô∏è Google API —Ç–∞–π–º–∞—É—Ç (8 —Å–µ–∫). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    } else {
      console.warn('üåê Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏');
    return createFallbackRoute(origin, destination, waypoints);
  }
}

// üÜï –°–æ–∑–¥–∞–Ω–∏–µ fallback –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä—è–º—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
function createFallbackRoute(origin, destination, waypoints = []) {
  console.log('üìç Using fallback route (interpolated lines)');
  
  const points = [origin, ...waypoints, destination];
  const coordinates = [];
  
  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  for (let i = 0; i < points.length - 1; i++) {
    const start = points[i];
    const end = points[i + 1];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50 –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π –¥–ª—è –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ–π –ª–∏–Ω–∏–∏
    const segmentPoints = generateRoutePoints(start, end, 50);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (i === 0) {
      coordinates.push(...segmentPoints);
    } else {
      coordinates.push(...segmentPoints.slice(1)); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }
  
  const totalDistance = calculateRouteDistance(points);
  const estimatedDuration = estimateTravelTime(totalDistance, 'walking');
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  const instructions = [];
  for (let i = 0; i < points.length - 1; i++) {
    const start = points[i];
    const end = points[i + 1];
    const segmentDistance = calculateDistance(
      start.latitude, start.longitude,
      end.latitude, end.longitude
    );
    const bearing = calculateBearing(
      start.latitude, start.longitude,
      end.latitude, end.longitude
    );
    
    let direction = '–Ω–∞ —Å–µ–≤–µ—Ä';
    if (bearing >= 315 || bearing < 45) direction = '–Ω–∞ —Å–µ–≤–µ—Ä';
    else if (bearing >= 45 && bearing < 135) direction = '–Ω–∞ –≤–æ—Å—Ç–æ–∫';
    else if (bearing >= 135 && bearing < 225) direction = '–Ω–∞ —é–≥';
    else if (bearing >= 225 && bearing < 315) direction = '–Ω–∞ –∑–∞–ø–∞–¥';

    instructions.push({
      instruction: i === 0 
        ? `–ù–∞—á–Ω–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ ${direction}` 
        : `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ ${direction}`,
      distance: `${segmentDistance.toFixed(1)} –∫–º`,
      duration: `${Math.round(estimateTravelTime(segmentDistance, 'walking'))} –º–∏–Ω`,
      coordinates: start
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  instructions.push({
    instruction: `–ü—Ä–∏–±—ã—Ç–∏–µ –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`,
    distance: '0 –º',
    duration: '0 –º–∏–Ω',
    coordinates: destination
  });
  
  return {
    success: true,
    route: {
      coordinates,
      distance: totalDistance,
      duration: estimatedDuration,
      instructions,
      bounds: getBoundingBox(points, 0.005) // –º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    },
    waypointOrder: waypoints.map((_, index) => index),
    isFallback: true
  };
}

// üÜï –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Google Polyline –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
function decodePolyline(encoded) {
  const coordinates = [];
  let index = 0, len = encoded.length;
  let lat = 0, lng = 0;

  while (index < len) {
    let b, shift = 0, result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    
    const dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
    lat += dlat;

    shift = 0;
    result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    
    const dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
    lng += dlng;

    coordinates.push({
      latitude: lat / 1E5,
      longitude: lng / 1E5
    });
  }

  return coordinates;
}

// üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
export async function getRouteToAttraction(userLocation, attraction, travelMode = 'WALKING') {
  if (!userLocation || !attraction || !attraction.coordinates) {
    return null;
  }

  const directionsResult = await getDirectionsFromGoogle(
    userLocation,
    attraction.coordinates,
    [],
    travelMode
  );

  return {
    ...directionsResult,
    destination: attraction,
    travelMode
  };
}

// üÜï –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
export async function getMultiPointRoute(userLocation, attractions, travelMode = 'WALKING') {
  if (!userLocation || !attractions || attractions.length === 0) {
    return null;
  }

  // –ï—Å–ª–∏ –æ–¥–Ω–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (attractions.length === 1) {
    return getRouteToAttraction(userLocation, attractions[0], travelMode);
  }

  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –¥–µ–ª–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
  const destination = attractions[attractions.length - 1];
  const waypoints = attractions.slice(0, -1).map(attraction => attraction.coordinates);

  const directionsResult = await getDirectionsFromGoogle(
    userLocation,
    destination.coordinates,
    waypoints,
    travelMode
  );

  return {
    ...directionsResult,
    attractions,
    travelMode,
    isMultiPoint: true
  };
}

// üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
export async function getPublicTransportRoute(userLocation, destination) {
  return getDirectionsFromGoogle(userLocation, destination, [], 'TRANSIT');
}

// üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
export async function getDrivingRoute(userLocation, destination, waypoints = []) {
  return getDirectionsFromGoogle(userLocation, destination, waypoints, 'DRIVING');
}

// üÜï –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export function analyzeRoute(routeResult) {
  if (!routeResult || !routeResult.success) {
    return null;
  }

  const { route } = routeResult;
  const analysis = {
    difficulty: 'easy',
    recommendations: [],
    warnings: [],
    estimatedCost: 0
  };

  // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –≤—Ä–µ–º–µ–Ω–∏
  if (route.distance > 20) {
    analysis.difficulty = 'hard';
    analysis.recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
  } else if (route.distance > 10) {
    analysis.difficulty = 'medium';
    analysis.recommendations.push('–í–æ–∑—å–º–∏—Ç–µ –≤–æ–¥—É –∏ —É–¥–æ–±–Ω—É—é –æ–±—É–≤—å');
  }

  // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
  if (route.duration > 120) {
    analysis.warnings.push('–ú–∞—Ä—à—Ä—É—Ç –∑–∞–π–º–µ—Ç –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤');
    analysis.recommendations.push('–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã');
  }

  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è —Ç–∞–∫—Å–∏/–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
  if (routeResult.travelMode === 'DRIVING') {
    analysis.estimatedCost = Math.round(route.distance * 50); // 50 —Ç–µ–Ω–≥–µ –∑–∞ –∫–º
    analysis.recommendations.push(`–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞–∫—Å–∏: ${analysis.estimatedCost} —Ç–µ–Ω–≥–µ`);
  } else if (routeResult.travelMode === 'TRANSIT') {
    analysis.estimatedCost = 150; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞
    analysis.recommendations.push(`–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞: ${analysis.estimatedCost} —Ç–µ–Ω–≥–µ`);
  }

  return analysis;
}

// üÜï –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export async function findNearbyTransitStops(location, radius = 500) {
  try {
    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?` +
      `location=${location.latitude},${location.longitude}` +
      `&radius=${radius}&type=transit_station&language=ru` +
      `&key=${GOOGLE_MAPS_API_KEY}`;

    const response = await fetch(url);
    const data = await response.json();

    if (data.status === 'OK') {
      return data.results.map(place => ({
        name: place.name,
        location: {
          latitude: place.geometry.location.lat,
          longitude: place.geometry.location.lng
        },
        distance: calculateDistance(
          location.latitude, location.longitude,
          place.geometry.location.lat, place.geometry.location.lng
        ),
        types: place.types,
        rating: place.rating || 0
      }));
    }
  } catch (error) {
    console.error('Error finding transit stops:', error);
  }
  
  return [];
}

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
export function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);
  
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
  
  return distance;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
function toRadians(degrees) {
  return degrees * (Math.PI / 180);
}

// –†–∞—Å—á–µ—Ç –∞–∑–∏–º—É—Ç–∞ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è) –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
export function calculateBearing(lat1, lon1, lat2, lon2) {
  const dLon = toRadians(lon2 - lon1);
  const y = Math.sin(dLon) * Math.cos(toRadians(lat2));
  const x = Math.cos(toRadians(lat1)) * Math.sin(toRadians(lat2)) - 
            Math.sin(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.cos(dLon);
  
  const bearing = Math.atan2(y, x);
  return (toDegrees(bearing) + 360) % 360;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–¥–∏–∞–Ω–æ–≤ –≤ –≥—Ä–∞–¥—É—Å—ã
function toDegrees(radians) {
  return radians * (180 / Math.PI);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
export function isWithinRadius(centerLat, centerLon, pointLat, pointLon, radiusKm) {
  const distance = calculateDistance(centerLat, centerLon, pointLat, pointLon);
  return distance <= radiusKm;
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
export function calculateCentroid(coordinates) {
  if (!coordinates || coordinates.length === 0) {
    return null;
  }

  let totalLat = 0;
  let totalLon = 0;
  
  coordinates.forEach(coord => {
    totalLat += coord.latitude;
    totalLon += coord.longitude;
  });
  
  return {
    latitude: totalLat / coordinates.length,
    longitude: totalLon / coordinates.length
  };
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ—Ç–æ–¥–æ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞ (–ø—Ä–æ—Å—Ç–æ–π TSP solver)
export function optimizeRouteOrder(startPoint, waypoints, endPoint) {
  if (!waypoints || waypoints.length === 0) {
    return [startPoint, endPoint];
  }

  const result = [startPoint];
  const unvisited = [...waypoints];
  let currentPoint = startPoint;

  while (unvisited.length > 0) {
    let nearestIndex = 0;
    let nearestDistance = calculateDistance(
      currentPoint.latitude, currentPoint.longitude,
      unvisited[0].latitude, unvisited[0].longitude
    );

    for (let i = 1; i < unvisited.length; i++) {
      const distance = calculateDistance(
        currentPoint.latitude, currentPoint.longitude,
        unvisited[i].latitude, unvisited[i].longitude
      );
      
      if (distance < nearestDistance) {
        nearestDistance = distance;
        nearestIndex = i;
      }
    }

    currentPoint = unvisited[nearestIndex];
    result.push(currentPoint);
    unvisited.splice(nearestIndex, 1);
  }

  if (endPoint) {
    result.push(endPoint);
  }

  return result;
}

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞
export function calculateRouteDistance(waypoints) {
  if (!waypoints || waypoints.length < 2) {
    return 0;
  }

  let totalDistance = 0;
  for (let i = 0; i < waypoints.length - 1; i++) {
    totalDistance += calculateDistance(
      waypoints[i].latitude, waypoints[i].longitude,
      waypoints[i + 1].latitude, waypoints[i + 1].longitude
    );
  }

  return totalDistance;
}

// –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
export function estimateTravelTime(distanceKm, transportMode = 'walking') {
  const speeds = {
    walking: 4.5, // –∫–º/—á
    cycling: 15,  // –∫–º/—á
    driving: 40,  // –∫–º/—á (–≥–æ—Ä–æ–¥—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è)
    public_transport: 20 // –∫–º/—á
  };

  const speed = speeds[transportMode] || speeds.walking;
  return (distanceKm / speed) * 60; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ç–æ—á–µ–∫
export function getBoundingBox(coordinates, padding = 0.01) {
  if (!coordinates || coordinates.length === 0) {
    return null;
  }

  let minLat = coordinates[0].latitude;
  let maxLat = coordinates[0].latitude;
  let minLon = coordinates[0].longitude;
  let maxLon = coordinates[0].longitude;

  coordinates.forEach(coord => {
    minLat = Math.min(minLat, coord.latitude);
    maxLat = Math.max(maxLat, coord.latitude);
    minLon = Math.min(minLon, coord.longitude);
    maxLon = Math.max(maxLon, coord.longitude);
  });

  return {
    southwest: { latitude: minLat - padding, longitude: minLon - padding },
    northeast: { latitude: maxLat + padding, longitude: maxLon + padding }
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
export function generateRoutePoints(startPoint, endPoint, numPoints = 10) {
  const points = [];
  
  for (let i = 0; i <= numPoints; i++) {
    const ratio = i / numPoints;
    const lat = startPoint.latitude + (endPoint.latitude - startPoint.latitude) * ratio;
    const lon = startPoint.longitude + (endPoint.longitude - startPoint.longitude) * ratio;
    
    points.push({ latitude: lat, longitude: lon });
  }
  
  return points;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
export function isValidCoordinate(latitude, longitude) {
  return (
    typeof latitude === 'number' && 
    typeof longitude === 'number' &&
    latitude >= -90 && latitude <= 90 &&
    longitude >= -180 && longitude <= 180
  );
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export function formatCoordinates(latitude, longitude, precision = 6) {
  if (!isValidCoordinate(latitude, longitude)) {
    return 'Invalid coordinates';
  }
  
  return `${latitude.toFixed(precision)}, ${longitude.toFixed(precision)}`;
}

// üÜï –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function findNearestRegion(userLatitude, userLongitude, regions) {
  if (!userLatitude || !userLongitude || !regions || regions.length === 0) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ê—Å—Ç–∞–Ω—É (—Å—Ç–æ–ª–∏—Ü–∞)
    return regions.find(r => r.id === 'astana') || regions[0];
  }

  let nearestRegion = regions[0];
  let shortestDistance = calculateDistance(
    userLatitude, userLongitude, 
    regions[0].coordinates.latitude, regions[0].coordinates.longitude
  );

  regions.forEach(region => {
    const distance = calculateDistance(
      userLatitude, userLongitude,
      region.coordinates.latitude, region.coordinates.longitude
    );

    if (distance < shortestDistance) {
      shortestDistance = distance;
      nearestRegion = region;
    }
  });

  console.log(`üéØ Nearest region: ${nearestRegion.name} (${shortestDistance.toFixed(1)}km away)`);
  return nearestRegion;
}

// üÜï –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É
export function filterAttractionsByRegion(attractions, regionId) {
  if (!regionId) return attractions;
  
  const filtered = attractions.filter(attraction => attraction.regionId === regionId);
  console.log(`üìç Filtered ${filtered.length} attractions for region: ${regionId}`);
  return filtered;
}

// üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getAttractionsInRadius(userLocation, attractions, radiusKm = 100) {
  if (!userLocation || !attractions) return attractions;

  const nearbyAttractions = attractions.filter(attraction => {
    if (!attraction.coordinates) return false;
    
    const distance = calculateDistance(
      userLocation.latitude, userLocation.longitude,
      attraction.coordinates.latitude, attraction.coordinates.longitude
    );
    
    return distance <= radiusKm;
  });

  console.log(`üìç Found ${nearbyAttractions.length} attractions within ${radiusKm}km radius`);
  return nearbyAttractions;
}

// üÜï –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É, –ø–æ—Ç–æ–º –ø–æ —Ä–∞–¥–∏—É—Å—É
export function getSmartFilteredAttractions(userLocation, attractions, regions, radiusKm = 200) {
  if (!userLocation || !attractions || !regions) {
    return { attractions, region: null, isNearbyRegion: false };
  }

  // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–≥–∏–æ–Ω
  const nearestRegion = findNearestRegion(
    userLocation.latitude, 
    userLocation.longitude, 
    regions
  );

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
  const distanceToRegionCenter = calculateDistance(
    userLocation.latitude, userLocation.longitude,
    nearestRegion.coordinates.latitude, nearestRegion.coordinates.longitude
  );

  // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω—Ç—Ä—É —Ä–µ–≥–∏–æ–Ω–∞ (< 50–∫–º), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω
  if (distanceToRegionCenter <= 50) {
    const regionAttractions = filterAttractionsByRegion(attractions, nearestRegion.id);
    return { 
      attractions: regionAttractions, 
      region: nearestRegion, 
      isNearbyRegion: true,
      distance: distanceToRegionCenter 
    };
  }

  // 4. –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
  const nearbyAttractions = getAttractionsInRadius(userLocation, attractions, radiusKm);
  return { 
    attractions: nearbyAttractions, 
    region: nearestRegion, 
    isNearbyRegion: false,
    distance: distanceToRegionCenter 
  };
} 