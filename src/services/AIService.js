import * as Speech from 'expo-speech';

// –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Voice —Å fallback –Ω–∞ expo-speech
let Voice = null;
let isVoiceAvailable = false;

try {
  Voice = require('@react-native-voice/voice').default;
  isVoiceAvailable = true;
  console.log('AIService: Using @react-native-voice/voice');
} catch (error) {
  console.log('AIService: @react-native-voice/voice not available in Expo Go, using expo-speech fallback');
  isVoiceAvailable = false;
}

import LiveKitService from './LiveKitService';
import FetchAIService from './FetchAIService';
import { calculateDistance, estimateTravelTime } from '../utils/geoUtils';

class AIService {
  constructor() {
    this.isListening = false;
    this.recognition = null;
    this.isUsingLiveKit = false;
    this.isUsingFetchAI = false;
    this.isVoiceAvailable = isVoiceAvailable;
    
    if (isVoiceAvailable) {
      this.setupVoiceRecognition();
    } else {
      console.log('AIService: Voice recognition not available, using text-to-speech only mode');
    }
  }

  setupVoiceRecognition() {
    if (!isVoiceAvailable || !Voice) return;
    
    Voice.onSpeechStart = this.onSpeechStart.bind(this);
    Voice.onSpeechEnd = this.onSpeechEnd.bind(this);
    Voice.onSpeechResults = this.onSpeechResults.bind(this);
    Voice.onSpeechError = this.onSpeechError.bind(this);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
  async initializeAdvancedServices(config = {}) {
    try {
      console.log('AIService: Initializing advanced AI services...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LiveKit –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (config.livekit?.enabled) {
        const livekitConfig = LiveKitService.getTestConfiguration ? 
          LiveKitService.getTestConfiguration() : 
          {
            serverUrl: 'wss://mock-tourgid-ai.demo.local',
            roomName: 'tourgid_expo_demo_room',
            participantName: 'expo_tourist_user'
          };
        
        const token = LiveKitService.generateAccessToken ? 
          LiveKitService.generateAccessToken(livekitConfig.roomName, livekitConfig.participantName) :
          `mock_token_${Date.now()}`;
        
        this.isUsingLiveKit = await LiveKitService.initializeRoom(
          config.livekit.serverUrl || livekitConfig.serverUrl,
          token
        );
        
        if (this.isUsingLiveKit) {
          console.log('AIService: LiveKit enabled for real-time voice AI');
        }
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fetch.ai –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (config.fetchai?.enabled && config.fetchai?.apiKey) {
        this.isUsingFetchAI = await FetchAIService.initialize(config.fetchai.apiKey);
        
        if (this.isUsingFetchAI) {
          console.log('AIService: Fetch.ai agents initialized for intelligent routing');
        }
      }

      return {
        livekit: this.isUsingLiveKit,
        fetchai: this.isUsingFetchAI
      };
    } catch (error) {
      console.error('AIService: Failed to initialize advanced services:', error);
      return { livekit: false, fetchai: false };
    }
  }

  onSpeechStart(event) {
    console.log('Speech started:', event);
  }

  onSpeechEnd(event) {
    console.log('Speech ended:', event);
    this.isListening = false;
  }

  onSpeechResults(event) {
    console.log('Speech results:', event.value);
    if (this.onResults) {
      this.onResults(event.value[0]);
    }
  }

  onSpeechError(event) {
    console.log('Speech error:', event.error);
    this.isListening = false;
    if (this.onError) {
      this.onError(event.error);
    }
  }

  // Voice Recognition —á–µ—Ä–µ–∑ expo-speech (—Ç–æ–ª—å–∫–æ TTS, STT —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è)
  async startListening(onResults, onError) {
    try {
      console.log('AIService: Starting voice input simulation...');
      this.isListening = true;
      
      // –í Expo Go —Å–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
      setTimeout(() => {
        if (this.isListening) {
          const mockInputs = [
            "–ù–∞–π–¥–∏ –º–∞—Ä—à—Ä—É—Ç –∫ –ë–∞–π—Ç–µ—Ä–µ–∫—É",
            "–ü–æ–∫–∞–∂–∏ –º—É–∑–µ–∏ –ü–∞–≤–ª–æ–¥–∞—Ä–∞", 
            "–í–µ–¥–∏ –∫ –º–µ—á–µ—Ç–∏ –ú–∞—à—Ö—É—Ä –ñ—É—Å—É–ø–∞",
            "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤ –ê—Å—Ç–∞–Ω–µ"
          ];
          const randomInput = mockInputs[Math.floor(Math.random() * mockInputs.length)];
          console.log('AIService: Simulated voice input:', randomInput);
          onResults(randomInput);
        }
      }, 2000);
      
    } catch (error) {
      console.error('Voice recognition error:', error);
      onError(error);
    }
  }

  async stopListening() {
    this.isListening = false;
    console.log('AIService: Stopped listening');
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  async processVoiceQuery(transcribedText, currentLocation, attractionsData, onRouteGenerated) {
    try {
      console.log('AIService: Processing voice query:', transcribedText);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π backend API
      const backendResult = await this.processWithBackendAPI(transcribedText, currentLocation);
      
      if (!backendResult.success) {
        throw new Error('Backend API failed: ' + (backendResult.error || 'Unknown error'));
      }

      const nluResult = {
        intent: backendResult.data.intent,
        confidence: backendResult.data.confidence,
        destination: backendResult.data.destination?.name,
        preferences: backendResult.data.preferences || [],
        fetchai_route: backendResult.data.fetchai_route,
        reasoning: backendResult.data.reasoning || [],
        alternatives: backendResult.data.alternatives || []
      };
      
      const routeData = backendResult.data.route_data;
      const responseText = backendResult.data.response_text;

      console.log('AIService: Backend response:', { nluResult, routeData, responseText });

      // TTS —á–µ—Ä–µ–∑ expo-speech
      await this.speakResponse(responseText);

      // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      if (onRouteGenerated && routeData) {
        onRouteGenerated(routeData);
      }

      return {
        success: true,
        nluResult,
        routeData,
        responseText,
        backend_used: true,
        confidence: nluResult.confidence || 0.8
      };
    } catch (error) {
      console.error('Voice query processing failed:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
      await this.speakResponse(errorMessage);
      
      return { 
        success: false, 
        error: error.message,
        responseText: errorMessage
      };
    }
  }

  // Backend API integration - –†–ï–ê–õ–¨–ù–´–ô Railway –±—ç–∫–µ–Ω–¥
  async processWithBackendAPI(transcribedText, currentLocation) {
    const BACKEND_URL = 'https://tourgid-production-8074.up.railway.app'; // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô URL
    
    const requestData = {
      query: transcribedText,
      user_location: currentLocation || { latitude: 52.3000, longitude: 76.9500 } // Default to Pavlodar
    };

    try {
      console.log(`üåê AIService: Calling REAL backend API at ${BACKEND_URL}`);
      console.log(`üìù Request data:`, JSON.stringify(requestData, null, 2));
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –±—ç–∫–µ–Ω–¥ –≤–æ–æ–±—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç
      console.log(`üîç Testing backend health...`);
      const healthResponse = await fetch(`${BACKEND_URL}/health`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        timeout: 10000
      });
      
      if (!healthResponse.ok) {
        console.warn(`‚ö†Ô∏è Backend health check failed: ${healthResponse.status}`);
      } else {
        const healthData = await healthResponse.json();
        console.log(`‚úÖ Backend health OK:`, healthData);
      }
      
      // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
      console.log(`üöÄ Making AI request...`);
      const response = await fetch(`${BACKEND_URL}/ai/process-voice`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(requestData),
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      console.log(`üì° Response status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Backend API error response:`, errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}\nResponse: ${errorText}`);
      }

      const result = await response.json();
      console.log(`‚úÖ Backend API success:`, JSON.stringify(result, null, 2));
      return result;
      
    } catch (error) {
      console.error(`üí• Backend API failed:`, error);
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        console.error(`üåê Network error: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É`);
        console.error(`üîó Backend URL: ${BACKEND_URL}`);
      }
      throw error;
    }
  }

  // Text-to-Speech —á–µ—Ä–µ–∑ expo-speech
  async speakResponse(text) {
    try {
      console.log('AIService: Speaking response:', text.substring(0, 50) + '...');
      
      await Speech.speak(text, {
        language: 'ru',
        pitch: 1.0,
        rate: 0.9,
        volume: 1.0,
      });
    } catch (error) {
      console.error('TTS Error:', error);
    }
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π Prompt Chaining —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FetchAI
  async processUserQuery(transcribedText, currentLocation) {
    try {
      // –ï—Å–ª–∏ FetchAI –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      if (this.isUsingFetchAI) {
        return await this.processWithFetchAI(transcribedText, currentLocation);
      } else {
        // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return this.mockNLUResponse(transcribedText);
      }
    } catch (error) {
      console.error('NLU processing failed:', error);
      return { intent: 'unclear', confidence: 0.0 };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ FetchAI –∞–≥–µ–Ω—Ç–æ–≤
  async processWithFetchAI(transcribedText, currentLocation) {
    try {
      console.log('AIService: Using FetchAI for intelligent query processing...');

      const userRequest = {
        transcribedText,
        currentLocation,
        preferences: this.extractPreferencesFromText(transcribedText),
        userId: 'current_user', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        timestamp: Date.now()
      };

      const fetchAIResult = await FetchAIService.planIntelligentRoute(userRequest);

      if (fetchAIResult.success) {
        return {
          intent: 'get_route',
          destination: fetchAIResult.route?.destination?.name,
          preferences: userRequest.preferences,
          confidence: fetchAIResult.confidence,
          fetchai_route: fetchAIResult.route,
          reasoning: fetchAIResult.reasoning,
          alternatives: fetchAIResult.alternatives
        };
      } else {
        console.warn('AIService: FetchAI failed, falling back to mock response');
        return this.mockNLUResponse(transcribedText);
      }
    } catch (error) {
      console.error('AIService: FetchAI processing failed:', error);
      return this.mockNLUResponse(transcribedText);
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  extractPreferencesFromText(text) {
    const lowerText = text.toLowerCase();
    const preferences = [];

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    const preferenceMap = {
      '–∫—Ä–∞—Å–∏–≤': 'scenic',
      '–∂–∏–≤–æ–ø–∏—Å': 'scenic', 
      '–∫—Ä–∞—Å–æ—Ç': 'scenic',
      '–≤–∏–¥': 'scenic',
      '–∏—Å—Ç–æ—Ä': 'historical',
      '–∫—É–ª—å—Ç—É—Ä': 'cultural',
      '–º—É–∑–µ–π': 'cultural',
      '–≥–∞–ª–µ—Ä–µ': 'cultural',
      '–±—ã—Å—Ç—Ä': 'short',
      '–∫–æ—Ä–æ—Ç': 'short',
      '—Å–∫–æ—Ä': 'short',
      '–¥–ª–∏–Ω–Ω': 'long',
      '–ø–æ–¥—Ä–æ–±–Ω': 'long',
      '—Ç–æ–ª–ø': 'avoid_crowds',
      '–Ω–∞—Ä–æ–¥': 'avoid_crowds',
      '—Ç–∏—Ö': 'quiet',
      '—Å–ø–æ–∫–æ–π–Ω': 'quiet',
      '–∞–∫—Ç–∏–≤–Ω': 'active',
      '—Å–ø–æ—Ä—Ç': 'active',
      '–µ–¥–∞': 'food',
      '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'food',
      '–∫–∞—Ñ–µ': 'food',
      '–ø–æ–∫—É–ø–∫': 'shopping',
      '–º–∞–≥–∞–∑–∏–Ω': 'shopping',
      '–ø—Ä–∏—Ä–æ–¥': 'nature',
      '–ø–∞—Ä–∫': 'nature'
    };

    Object.entries(preferenceMap).forEach(([keyword, preference]) => {
      if (lowerText.includes(keyword) && !preferences.includes(preference)) {
        preferences.push(preference);
      }
    });

    return preferences;
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å FetchAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  async generateRoute(nluResult, currentLocation, attractionsData) {
    if (nluResult.intent !== 'get_route') {
      return null;
    }

    try {
      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç FetchAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (nluResult.fetchai_route) {
        return this.adaptFetchAIRouteToStandardFormat(nluResult.fetchai_route, currentLocation);
      }

      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
      return await this.generateStandardRoute(nluResult, currentLocation, attractionsData);
    } catch (error) {
      console.error('Route generation failed:', error);
      return null;
    }
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è FetchAI –º–∞—Ä—à—Ä—É—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
  adaptFetchAIRouteToStandardFormat(fetchaiRoute, currentLocation) {
    return {
      destination: fetchaiRoute.destination || fetchaiRoute.waypoints?.[fetchaiRoute.waypoints.length - 1],
      route: {
        start: currentLocation,
        end: fetchaiRoute.destination?.coordinates,
        waypoints: fetchaiRoute.waypoints || [],
        preferences: fetchaiRoute.preferences || [],
        estimated_duration: fetchaiRoute.estimated_duration,
        estimated_distance: fetchaiRoute.estimated_distance,
        difficulty_level: fetchaiRoute.difficulty_level,
        highlights: fetchaiRoute.highlights
      },
      reasoning: fetchaiRoute.reasoning,
      alternatives: fetchaiRoute.alternatives
    };
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (fallback)
  async generateStandardRoute(nluResult, currentLocation, attractionsData) {
    let targetAttraction = null;
    
    if (nluResult.destination) {
      targetAttraction = attractionsData.find(attr => 
        attr.name.toLowerCase().includes(nluResult.destination.toLowerCase())
      );
    }

    if (!targetAttraction && nluResult.preferences.length > 0) {
      targetAttraction = attractionsData.find(attr =>
        nluResult.preferences.some(pref => attr.categories?.includes(pref))
      );
    }

    if (!targetAttraction) {
      targetAttraction = attractionsData[0];
    }

    // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
    const distance = currentLocation && targetAttraction.coordinates ? 
      calculateDistance(
        currentLocation.latitude, currentLocation.longitude,
        targetAttraction.coordinates.latitude, targetAttraction.coordinates.longitude
      ) : 0;

    const estimatedTime = estimateTravelTime(distance, 'walking');

    return {
      destination: targetAttraction,
      route: {
        start: currentLocation,
        end: targetAttraction.coordinates,
        waypoints: [],
        preferences: nluResult.preferences,
        estimated_duration: estimatedTime,
        estimated_distance: distance
      }
    };
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º FetchAI
  async generateResponse(routeData, nluResult) {
    try {
      if (!routeData) {
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–ù–∞–π–¥–∏ –º–∞—Ä—à—Ä—É—Ç –∫ –ë–∞–π—Ç–µ—Ä–µ–∫—É' –∏–ª–∏ '–ü–æ–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º'.";
      }

      const { destination, route } = routeData;
      let response = `–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—à–µ–ª –º–∞—Ä—à—Ä—É—Ç –∫ ${destination.name}.`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
      if (route.estimated_distance) {
        response += ` –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${route.estimated_distance.toFixed(1)} –∫–º.`;
      }
      if (route.estimated_duration) {
        response += ` –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: ${Math.round(route.estimated_duration)} –º–∏–Ω—É—Ç.`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
      if (nluResult.preferences.includes('scenic')) {
        response += " –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞.";
      }
      if (nluResult.preferences.includes('historical')) {
        response += " –ü–æ –ø—É—Ç–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã.";
      }
      if (nluResult.preferences.includes('short')) {
        response += " –Ø –≤—ã–±—Ä–∞–ª –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –¥–ª—è –≤–∞—Å.";
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      if (destination.description) {
        response += ` ${destination.name} - ${destination.description}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ—Ç FetchAI –µ—Å–ª–∏ –µ—Å—Ç—å
      if (routeData.reasoning && routeData.reasoning.length > 0) {
        response += ` –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç: ${routeData.reasoning.join(', ')}.`;
      }

      // –£–ø–æ–º–∏–Ω–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (routeData.alternatives && routeData.alternatives.length > 0) {
        response += ` –£ –º–µ–Ω—è —Ç–∞–∫–∂–µ –µ—Å—Ç—å ${routeData.alternatives.length} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞.`;
      }

      response += " –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!";

      return response;
    } catch (error) {
      console.error('Response generation failed:', error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.";
    }
  }

  // Mock NLU –¥–ª—è –¥–µ–º–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  mockNLUResponse(text) {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–º–∞—Ä—à—Ä—É—Ç') || lowerText.includes('–¥–æ—Ä–æ–≥') || lowerText.includes('–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è')) {
      let destination = null;
      const preferences = this.extractPreferencesFromText(text);

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–µ—Å—Ç
      const destinations = {
        '–±–∞–π—Ç–µ—Ä–µ–∫': '–ë–∞–π—Ç–µ—Ä–µ–∫',
        '—Ö–∞–Ω —à–∞—Ç—ã—Ä': '–•–∞–Ω –®–∞—Ç—ã—Ä', 
        '–∞–∫–æ—Ä–¥–∞': '–ê–∫–æ—Ä–¥–∞',
        '–º–µ—á–µ—Ç—å': '–ú–µ—á–µ—Ç—å –ù—É—Ä-–ê—Å—Ç–∞–Ω–∞',
        '–º—É–∑–µ–π': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π',
        '–ø–ª–æ—â–∞–¥': '–ü–ª–æ—â–∞–¥—å –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
        '–ø–∞—Ä–∫': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫'
      };

      Object.entries(destinations).forEach(([keyword, place]) => {
        if (lowerText.includes(keyword)) {
          destination = place;
        }
      });

      return {
        intent: 'get_route',
        destination,
        preferences,
        confidence: 0.8
      };
    }

    return { intent: 'unclear', confidence: 0.3 };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  getServicesStatus() {
    return {
      livekit: {
        enabled: this.isUsingLiveKit,
        status: this.isUsingLiveKit ? LiveKitService.getConnectionState() : 'disabled'
      },
      fetchai: {
        enabled: this.isUsingFetchAI,
        statistics: this.isUsingFetchAI ? FetchAIService.getAgentStatistics() : null
      }
    };
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  async destroy() {
    try {
      if (isVoiceAvailable && Voice) {
        await Voice.destroy();
      }
      
      if (this.isUsingLiveKit) {
        await LiveKitService.disconnect();
      }
      
      if (this.isUsingFetchAI) {
        await FetchAIService.shutdown();
      }
      
      console.log('AIService: All services destroyed');
    } catch (error) {
      console.error('Failed to destroy AI services:', error);
    }
  }
}

export default new AIService(); 